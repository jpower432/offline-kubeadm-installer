#!/bin/bash

# Get reference directory
directory=$(pwd)

# Create Kubernetes firewall rules
ufw allow 6443/tcp
ufw allow 10250/tcp


# Set iptables to see bridged traffic

cat <<EOF > /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF
sysctl --system

# Install docker
dpkg -i $directory/packages/*.deb
apt-get upgrade

## Create /etc/containerd directory.
mkdir /etc/containerd

# Setup daemon.
tee /etc/modules-load.d/containerd.conf <<EOF
overlay
br_netfilter
EOF

# Load at runtime
modprobe overlay
modprobe br_netfilter

containerd config default > /etc/containerd/config.toml

# Start containerd
systemctl enable containerd
systemctl start containerd

# Load container images
for f in $directory/images/*; do ctr -n=k8s.io images import $f; done

# Configure kubelet to use containerd
echo 'Environment="KUBELET_EXTRA_ARGS=--cgroup-driver=systemd --container-runtime=remote --runtime-request-timeout=15m --container-runtime-endpoint=unix:///run/containerd/containerd.sock"' >> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

# Start Kubelet
systemctl daemon-reload
systemctl enable kubelet
systemctl start kubelet

# Make weave-net available
mkdir /root/manifests
cp $directory/manifests/* /root/manifests/

#Install crictl
tar zxvf $directory/dependencies/crictl-1.19.0-linux-arm64.tar.gz -C /usr/local/bin

#Configure crictl
echo "runtime-endpoint: unix:///run/containerd/containerd.sock" >> /etc/crictl.yaml


